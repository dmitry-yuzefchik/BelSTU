//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated from a template.
//
//     Manual changes to this file may cause unexpected behavior in your application.
//     Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Taskboard
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class TaskboardEntities : DbContext
    {
        public TaskboardEntities()
            : base("name=TaskboardEntities")
        {
            this.Configuration.LazyLoadingEnabled = false;
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<ACTIVITY> ACTIVITY { get; set; }
        public virtual DbSet<BOARD> BOARD { get; set; }
        public virtual DbSet<BOARD_SETTINGS> BOARD_SETTINGS { get; set; }
        public virtual DbSet<COLUMN> COLUMN { get; set; }
        public virtual DbSet<PROJECT> PROJECT { get; set; }
        public virtual DbSet<PROJECT_SETTINGS> PROJECT_SETTINGS { get; set; }
        public virtual DbSet<ROLES> ROLES { get; set; }
        public virtual DbSet<TASKS> TASKS { get; set; }
        public virtual DbSet<TEAM> TEAM { get; set; }
        public virtual DbSet<TEAM_USER> TEAM_USER { get; set; }
        public virtual DbSet<USER> USER { get; set; }
        public virtual DbSet<USER_PROFILE> USER_PROFILE { get; set; }
        public virtual DbSet<USER_PROJECT> USER_PROJECT { get; set; }
        public virtual DbSet<USER_TOKEN> USER_TOKEN { get; set; }
    
        public virtual int sp_alterdiagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_alterdiagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_creatediagram(string diagramname, Nullable<int> owner_id, Nullable<int> version, byte[] definition)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var versionParameter = version.HasValue ?
                new ObjectParameter("version", version) :
                new ObjectParameter("version", typeof(int));
    
            var definitionParameter = definition != null ?
                new ObjectParameter("definition", definition) :
                new ObjectParameter("definition", typeof(byte[]));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_creatediagram", diagramnameParameter, owner_idParameter, versionParameter, definitionParameter);
        }
    
        public virtual int sp_dropdiagram(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_dropdiagram", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagramdefinition_Result> sp_helpdiagramdefinition(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagramdefinition_Result>("sp_helpdiagramdefinition", diagramnameParameter, owner_idParameter);
        }
    
        public virtual ObjectResult<sp_helpdiagrams_Result> sp_helpdiagrams(string diagramname, Nullable<int> owner_id)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<sp_helpdiagrams_Result>("sp_helpdiagrams", diagramnameParameter, owner_idParameter);
        }
    
        public virtual int sp_renamediagram(string diagramname, Nullable<int> owner_id, string new_diagramname)
        {
            var diagramnameParameter = diagramname != null ?
                new ObjectParameter("diagramname", diagramname) :
                new ObjectParameter("diagramname", typeof(string));
    
            var owner_idParameter = owner_id.HasValue ?
                new ObjectParameter("owner_id", owner_id) :
                new ObjectParameter("owner_id", typeof(int));
    
            var new_diagramnameParameter = new_diagramname != null ?
                new ObjectParameter("new_diagramname", new_diagramname) :
                new ObjectParameter("new_diagramname", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_renamediagram", diagramnameParameter, owner_idParameter, new_diagramnameParameter);
        }
    
        public virtual int sp_upgraddiagrams()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_upgraddiagrams");
        }
    
        public virtual ObjectResult<Team_AddUserToTeam_Result> Team_AddUserToTeam(string creatorEmail, Nullable<int> teamId, string addUserEmail)
        {
            var creatorEmailParameter = creatorEmail != null ?
                new ObjectParameter("creatorEmail", creatorEmail) :
                new ObjectParameter("creatorEmail", typeof(string));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("teamId", teamId) :
                new ObjectParameter("teamId", typeof(int));
    
            var addUserEmailParameter = addUserEmail != null ?
                new ObjectParameter("addUserEmail", addUserEmail) :
                new ObjectParameter("addUserEmail", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Team_AddUserToTeam_Result>("Team_AddUserToTeam", creatorEmailParameter, teamIdParameter, addUserEmailParameter);
        }
    
        public virtual ObjectResult<Team_CreateTeam_Result> Team_CreateTeam(string userEmail, string teamName)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var teamNameParameter = teamName != null ?
                new ObjectParameter("teamName", teamName) :
                new ObjectParameter("teamName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Team_CreateTeam_Result>("Team_CreateTeam", userEmailParameter, teamNameParameter);
        }
    
        public virtual ObjectResult<Team_DeleteTeam_Result> Team_DeleteTeam(string creatorEmail, Nullable<int> teamId)
        {
            var creatorEmailParameter = creatorEmail != null ?
                new ObjectParameter("creatorEmail", creatorEmail) :
                new ObjectParameter("creatorEmail", typeof(string));
    
            var teamIdParameter = teamId.HasValue ?
                new ObjectParameter("teamId", teamId) :
                new ObjectParameter("teamId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Team_DeleteTeam_Result>("Team_DeleteTeam", creatorEmailParameter, teamIdParameter);
        }
    
        public virtual ObjectResult<string> Team_GetUserTeams(string userEmail, Nullable<int> skip, Nullable<int> amount)
        {
            var userEmailParameter = userEmail != null ?
                new ObjectParameter("userEmail", userEmail) :
                new ObjectParameter("userEmail", typeof(string));
    
            var skipParameter = skip.HasValue ?
                new ObjectParameter("skip", skip) :
                new ObjectParameter("skip", typeof(int));
    
            var amountParameter = amount.HasValue ?
                new ObjectParameter("amount", amount) :
                new ObjectParameter("amount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("Team_GetUserTeams", userEmailParameter, skipParameter, amountParameter);
        }
    
        public virtual ObjectResult<User_Delete_Result> User_Delete(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Delete_Result>("User_Delete", userIdParameter);
        }
    
        public virtual int User_Job_DeleteExpiredTokens()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("User_Job_DeleteExpiredTokens");
        }
    
        public virtual int User_Job_StartCreateDeleteExpiredToken()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("User_Job_StartCreateDeleteExpiredToken");
        }
    
        public virtual int User_Jobs_StartCreateDeleteExpiredToken()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("User_Jobs_StartCreateDeleteExpiredToken");
        }
    
        public virtual ObjectResult<User_Login_Result> User_Login(string email, string password)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Login_Result>("User_Login", emailParameter, passwordParameter);
        }
    
        public virtual ObjectResult<User_Logout_Result> User_Logout(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Logout_Result>("User_Logout", userIdParameter);
        }
    
        public virtual ObjectResult<User_Register_Result> User_Register(string email, string password, string name)
        {
            var emailParameter = email != null ?
                new ObjectParameter("email", email) :
                new ObjectParameter("email", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_Register_Result>("User_Register", emailParameter, passwordParameter, nameParameter);
        }
    
        public virtual ObjectResult<User_RenewToken_Result> User_RenewToken(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("userId", userId) :
                new ObjectParameter("userId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<User_RenewToken_Result>("User_RenewToken", userIdParameter);
        }
    }
}
